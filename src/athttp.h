#ifndef __LED__ATHTTP_H__
#define __LED__ATHTTP_H__

#include <Arduino.h>
#include <stdio.h>
#include <stdbool.h>

/**
 * Minimalist HTTP parser for ES8266/ESP01 board, designed so that commands can
 * be received from GET requests from a browser.
 * - Ignores the close connection, +IPD and other stuff generated by the board.
 * - Focussed specifically on GET requests, and only the URL.
 * - Does not allocate memory, so it could potentially be used on memory constrainted
 *   devices such as Arduino. Uses a single static buffer which it returns
 *   each time, so the result of parsing should be processed by the consumer
 *   before calling again.
 */

// These values can be increased, but designed for small systems so that only 30 bytes
// is needed for the buffer. ATHTTP_MAX_URL_PART_LENGTH includes a null terminator, so
// effectively only 9 chars are significant in each url part.
#define ATHTTP_MAX_URL_PARTS 3
#define ATHTTP_MAX_URL_PART_LENGTH 10
#define ATHTTP_IPD_LENGTH 4

typedef struct http_request_t {
    // If we can extract some url parts, this is true, otherwise is false and this
    // request can be ignored.
    bool valid;

    // True if HTTP is present in the header. If so, the consumer should write an
    // HTTP response.
    bool isHTTP;

    // buffer for holding nul terminated string identifying the link number. If
    // a response is sent, it needs to include this number.
    char ipdLink[ATHTTP_IPD_LENGTH + 1];

    // The number of url parts that were parsed. Can be 0 if the URL is "/". In that
    // case, valid is true.
    int numUrlParts;

    // Up to 3 URL parts can be parsed, starting from root
    char urlParts[ATHTTP_MAX_URL_PARTS][ATHTTP_MAX_URL_PART_LENGTH];
} http_request_t;

// Parse the request. Returns NULL if nothing can be parsed from the result.
http_request_t *parseHttpRequest(String request);

#endif